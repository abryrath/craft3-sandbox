!function(e){function t(t){for(var s,o,c=t[0],a=t[1],u=t[2],h=0,d=[];h<c.length;h++)o=c[h],r[o]&&d.push(r[o][0]),r[o]=0;for(s in a)Object.prototype.hasOwnProperty.call(a,s)&&(e[s]=a[s]);for(l&&l(t);d.length;)d.shift()();return i.push.apply(i,u||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],s=!0,c=1;c<n.length;c++){var a=n[c];0!==r[a]&&(s=!1)}s&&(i.splice(t--,1),e=o(o.s=n[0]))}return e}var s={},r={main:0},i=[];function o(t){if(s[t])return s[t].exports;var n=s[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=s,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)o.d(n,s,function(t){return e[t]}.bind(null,s));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var c=window.webpackJsonp=window.webpackJsonp||[],a=c.push.bind(c);c.push=t,c=c.slice();for(var u=0;u<c.length;u++)t(c[u]);var l=a;i.push([0,"vendor"]),n()}({"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/lib/loader.js!./resources/scss/field.scss":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader!./node_modules/postcss-loader/src??embedded!./node_modules/sass-loader/lib/loader.js!./resources/scss/field.scss ***!
  \********************************************************************************************************************************************************************************************************/
/*! no static exports found */function(e,t,n){},"./resources/js/RelatedEntryTypesField.ts":
/*!************************************************!*\
  !*** ./resources/js/RelatedEntryTypesField.ts ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s=n(/*! ./components/ChannelGroup */"./resources/js/components/ChannelGroup.ts"),r=n(/*! ./components/SectionMap */"./resources/js/components/SectionMap.ts"),i=n(/*! ./components/EntryTypeGroup */"./resources/js/components/EntryTypeGroup.ts"),o=function(){function e(e){var t=this;this.namespacedId=e.namespace;var n=e.prefix;this.activeSections=[];var o=document.querySelector("#"+n+n+"channels");if(o){this.channelGroup=new s.default(o),this.activeSections=this.channelGroup.getActiveChannels();var c=JSON.parse(o.dataset.relatedEntryTypesChannels);this.sectionMap=new r.default(c.sections,c.entryTypes)}var a=document.querySelector("#"+n+n+"select");a&&(this.entryTypeGroup=new i.default(a),this.entryTypeGroup.setEntryTypes(this.sectionMap.getEntryTypesByChannelArray(this.activeSections)),this.entryTypeGroup.render()),this.updateActiveSections=this.updateActiveSections.bind(this),o.parentElement.addEventListener("channelChange",function(e){var n=e.detail,s=n.all,r=n.active;t.updateActiveSections(s,r)})}return e.prototype.updateActiveSections=function(e,t){this.activeSections=e?t?this.channelGroup.getChannels():[]:this.channelGroup.getActiveChannels();var n=this.sectionMap.getEntryTypesByChannelArray(this.activeSections);this.entryTypeGroup.setEntryTypes(n),this.entryTypeGroup.render()},e}();t.default=o,window.RelatedEntryTypesField=o},"./resources/js/components/AllChannel.ts":
/*!***********************************************!*\
  !*** ./resources/js/components/AllChannel.ts ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s,r=n(/*! ./Channel */"./resources/js/components/Channel.ts"),i=(s=function(e,t){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}s(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=function(e){function t(t){return e.call(this,t)||this}return i(t,e),t.prototype.checkboxChangeHandler=function(e){var t=e.target;this.active=t.checked;var n=new CustomEvent("channelChange",{detail:{sectionUid:this.uid,active:this.active,all:!0},bubbles:!0});return this.checkbox.dispatchEvent(n)},t}(r.default);t.default=o},"./resources/js/components/Channel.ts":
/*!********************************************!*\
  !*** ./resources/js/components/Channel.ts ***!
  \********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s=function(){function e(e){this.checkbox=e,this.active=e.checked;var t=e.value.match(/section:(.*)/);t&&t.length&&(this.uid=t[1]),this.name=e.value;var n=document.querySelector('label[for="'+this.checkbox.id+'"]');n&&(this.label=n.innerText),this.checkboxChangeHandler=this.checkboxChangeHandler.bind(this),this.updateActiveStatus=this.updateActiveStatus.bind(this),this.checkbox.addEventListener("change",this.checkboxChangeHandler)}return e.prototype.updateActiveStatus=function(){this.active=this.checkbox.checked},e.prototype.checkboxChangeHandler=function(e){var t=e.target;this.active=t.checked;var n=new CustomEvent("channelChange",{detail:{sectionUid:this.uid,active:this.active,all:!1},bubbles:!0});return this.checkbox.dispatchEvent(n)},e}();t.default=s},"./resources/js/components/ChannelGroup.ts":
/*!*************************************************!*\
  !*** ./resources/js/components/ChannelGroup.ts ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s=n(/*! ./Channel */"./resources/js/components/Channel.ts"),r=n(/*! ./AllChannel */"./resources/js/components/AllChannel.ts"),i=function(){function e(e){this.node=e;var t=e.querySelectorAll('input[type="checkbox"]');this.channels=Array.from(t).map(function(e){return"*"===e.value?new r.default(e):new s.default(e)}),this.getActiveChannels=this.getActiveChannels.bind(this),this.getChannels=this.getChannels.bind(this)}return e.prototype.getChannels=function(){return this.channels},e.prototype.getActiveChannels=function(){return this.channels.filter(function(e){return e.updateActiveStatus(),e.active})},e}();t.default=i},"./resources/js/components/EntryType.ts":
/*!**********************************************!*\
  !*** ./resources/js/components/EntryType.ts ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s=function(){function e(e){this.id=e.id,this.label=e.label,this.sectionUid=e.sectionUid,this.active=e.active,this.toHtml=this.toHtml.bind(this)}return e.prototype.toHtml=function(){return'<div>\n            <input type="checkbox" name="types[unionco\\relatedentrytypes\\fields\\RelatedEntryTypesField][entryTypes][]" class="checkbox" value="'+this.id+'" id="entryType-'+this.id+'" '+(this.active?"checked":"")+'/>\n            <label for="entryType-'+this.id+'">'+this.label+"</label>\n        </div>"},e}();t.default=s},"./resources/js/components/EntryTypeGroup.ts":
/*!***************************************************!*\
  !*** ./resources/js/components/EntryTypeGroup.ts ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s=function(){function e(e){this.node=e}return e.prototype.render=function(){console.log(this.entryTypes);var e=this.node.querySelectorAll(".field.checkboxfield"),t=this.entryTypes.map(function(e){return e.id.toString()});e.forEach(function(e){var n=e.querySelector('input[type="checkbox"]').value;t.includes(n)?e.hidden=!1:e.hidden=!0})},e.prototype.setEntryTypes=function(e){this.entryTypes=e},e}();t.default=s},"./resources/js/components/SectionMap.ts":
/*!***********************************************!*\
  !*** ./resources/js/components/SectionMap.ts ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var s=n(/*! ./EntryType */"./resources/js/components/EntryType.ts"),r=function(){function e(e,t){this.sections=e,this.entryTypes=t.map(function(e){return new s.default(e)}),this.getEntryTypesBySectionUid=this.getEntryTypesBySectionUid.bind(this),this.getEntryTypesBySectionUidArray=this.getEntryTypesBySectionUidArray.bind(this),this.getEntryTypesByChannelArray=this.getEntryTypesByChannelArray.bind(this)}return e.prototype.getEntryTypesBySectionUid=function(e){if(!e||!e.length)return[];var t=this.entryTypes.filter(function(t){return t.sectionUid===e});return t&&t.length?t:[]},e.prototype.getEntryTypesBySectionUidArray=function(e){var t=this,n=[];return e.forEach(function(e){t.getEntryTypesBySectionUid(e).forEach(function(e){n.push(e)})}),n},e.prototype.getEntryTypesByChannelArray=function(e){var t=e.map(function(e){return e.uid});return this.getEntryTypesBySectionUidArray(t)},e}();t.default=r},"./resources/scss/field.scss":
/*!***********************************!*\
  !*** ./resources/scss/field.scss ***!
  \***********************************/
/*! no static exports found */function(e,t,n){var s=n(/*! !../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader!../../node_modules/postcss-loader/src??embedded!../../node_modules/sass-loader/lib/loader.js!./field.scss */"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/lib/loader.js!./resources/scss/field.scss");"string"==typeof s&&(s=[[e.i,s,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(/*! ../../node_modules/style-loader/lib/addStyles.js */"./node_modules/style-loader/lib/addStyles.js")(s,r);s.locals&&(e.exports=s.locals)},0:
/*!**********************************************************************************!*\
  !*** multi ./resources/js/RelatedEntryTypesField.ts ./resources/scss/field.scss ***!
  \**********************************************************************************/
/*! no static exports found */function(e,t,n){n(/*! /Users/abryrath/Union/Library/relatedentrytypes/resources/js/RelatedEntryTypesField.ts */"./resources/js/RelatedEntryTypesField.ts"),e.exports=n(/*! /Users/abryrath/Union/Library/relatedentrytypes/resources/scss/field.scss */"./resources/scss/field.scss")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,